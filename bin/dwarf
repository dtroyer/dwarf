#!/usr/bin/env python
#
# Copyright (c) 2014 Hewlett-Packard Development Company, L.P.
# Copyright (c) 2013 OpenStack Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import logging
import os
import signal
import sys

# Add ../ to the Python search path if ../dwarf/__init__.py exists
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                                os.pardir, os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'dwarf', '__init__.py')):
    sys.path.insert(0, possible_topdir)

from dwarf import config

from dwarf.compute import ec2metadata

from dwarf.compute import api as compute_api
from dwarf.identity import api as identity_api
from dwarf.image import api as image_api

CONF = config.Config()
THREADS = []


def cleanup(dummy_signal, dummy_frame):
    # Stop all threads
    for thread in THREADS:
        thread.stop()

def main():
    # Set up the logger
    _filename = CONF.dwarf_log
    _format = '%(asctime)s - %(levelname)s - %(name)s : %(message)s'
    _level = logging.DEBUG if CONF.debug else logging.INFO
    logging.basicConfig(filename=_filename, format=_format, level=_level)

    # Dump the config options
    CONF.dump_options()

    # Install the cleanup handler
    signal.signal(signal.SIGINT, cleanup)
    signal.signal(signal.SIGTERM, cleanup)

    # Create the API (and Ec2 metadata) server threads
    THREADS.extend([
        identity_api.IdentityApiServer(),
        compute_api.ComputeApiServer(),
        image_api.ImageApiServer(),
        ec2metadata.Ec2MetadataServer(),
    ])

    # Start all threads
    for thread in THREADS:
        thread.daemon = True
        thread.start()

    # Wait for all threads to terminate
    for thread in THREADS:
        while thread.is_alive():
            thread.join(3600)


if __name__ == '__main__':
    main()
